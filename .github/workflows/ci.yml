name: .NET

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Install EF Core CLI
      run: dotnet tool install --global dotnet-ef --version 6.0.*
    - name: Add dotnet-ef to PATH
      run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
    - name: Restore
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Format
      run: dotnet format --no-restore --verify-no-changes
    - name: Format style
      run: dotnet format style --no-restore --verify-no-changes
    - name: Analyzers
      run: dotnet format analyzers --no-restore
    - name: Grep for forbidden APIs
      run: git grep -nE "(MessageBox\.Show|#if\s+WINDOWS)" && exit 1 || echo "OK"
    - name: Test
      run: dotnet test --no-build --collect:"XPlat Code Coverage" --results-directory ./TestResults /p:Threshold=90 /p:ThresholdType=line /p:ThresholdStat=total --filter "TestCategory!=UI"
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Restore
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore -c Release
    - name: Start WinAppDriver
      shell: powershell
      run: |
        Start-Process "C:\\Program Files (x86)\\Windows Application Driver\\WinAppDriver.exe"
        Start-Sleep -Seconds 5
    - name: Test
      run: dotnet test --no-build --results-directory ./TestResults
    - uses: actions/upload-artifact@v3
      with:
        name: TestResults-windows
        path: TestResults/*.trx

  pack-analyzers:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Pack analyzers
      run: dotnet pack src/Publishing.Analyzers/Publishing.Analyzers.csproj -c Release -o ./artifacts
    - uses: actions/upload-artifact@v3
      with:
        name: Publishing.Analyzers
        path: artifacts/*.nupkg
    - name: Push package
      run: dotnet nuget push artifacts/*.nupkg --source ${{ secrets.NUGET_SOURCE }} --api-key ${{ secrets.NUGET_API_KEY }}
