name: API Gateway CI

on:
  push:
    paths:
      - 'src/ApiGateway/**'
  pull_request:
    paths:
      - 'src/ApiGateway/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x
      - name: Check JWT env vars
        run: |
          test -n "${{ secrets.JWT__SigningKey }}" && \
          test -n "${{ secrets.JWT__Issuer }}" && \
          test -n "${{ secrets.JWT__Audience }}"
      - name: Restore
        run: dotnet restore src/ApiGateway/ApiGateway.csproj
      - name: Build
        run: dotnet build src/ApiGateway/ApiGateway.csproj --no-restore
      - name: Test Core
        run: dotnet test src/tests/Publishing.Core.Tests/Publishing.Core.Tests.csproj --no-build
      - name: Test Integration
        run: dotnet test src/tests/Publishing.Integration.Tests/Publishing.Integration.Tests.csproj --no-build
      - name: Build container
        env:
          REDIS_CONN: ${{ secrets.REDIS_CONN }}
          CONSUL_URL: ${{ secrets.CONSUL_URL }}
          OIDC_AUTHORITY: ${{ secrets.OIDC_AUTHORITY }}
          OIDC_AUDIENCE: ${{ secrets.OIDC_AUDIENCE }}
          ELASTIC_URL: ${{ secrets.ELASTIC_URL }}
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/api-gateway -f src/ApiGateway/Dockerfile .
      - name: Login & Push
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/api-gateway
        env:
          REDIS_CONN: ${{ secrets.REDIS_CONN }}
          CONSUL_URL: ${{ secrets.CONSUL_URL }}
          OIDC_AUTHORITY: ${{ secrets.OIDC_AUTHORITY }}
          OIDC_AUDIENCE: ${{ secrets.OIDC_AUDIENCE }}
          ELASTIC_URL: ${{ secrets.ELASTIC_URL }}
