services:
  orders:
    build:
      context: .
      dockerfile: src/Publishing.Orders.Service/Dockerfile
    ports:
      - "5001:80"
    environment:
      - ORDERS_DB_CONN=${ORDERS_DB_CONN}
      - REDIS_CONN=${REDIS_CONN}
      - RABBIT_CONN=${RABBIT_CONN}
      - CONSUL_URL=${CONSUL_URL}
      - SERVICE_NAME=orders
      - SERVICE_ADDRESS=orders
      - SERVICE_PORT=80
      - OIDC_AUTHORITY=${OIDC_AUTHORITY}
      - OIDC_AUDIENCE=${OIDC_AUDIENCE}
      - JWT__Issuer=${JWT__Issuer}
      - JWT__Audience=${JWT__Audience}
      - JWT__SigningKey=${JWT__SigningKey}
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_started
      rabbit:
        condition: service_healthy
      organization:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - micro-net

  profile:
    build:
      context: .
      dockerfile: src/Publishing.Profile.Service/Dockerfile
    ports:
      - "5002:80"
    environment:
      - PROFILE_DB_CONN=${PROFILE_DB_CONN}
      - REDIS_CONN=${REDIS_CONN}
      - RABBIT_CONN=${RABBIT_CONN}
      - CONSUL_URL=${CONSUL_URL}
      - SERVICE_NAME=profile
      - SERVICE_ADDRESS=profile
      - SERVICE_PORT=80
      - OIDC_AUTHORITY=${OIDC_AUTHORITY}
      - OIDC_AUDIENCE=${OIDC_AUDIENCE}
      - JWT__Issuer=${JWT__Issuer}
      - JWT__Audience=${JWT__Audience}
      - JWT__SigningKey=${JWT__SigningKey}
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_started
      rabbit:
        condition: service_healthy
      organization:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - micro-net

  organization:
    build:
      context: .
      dockerfile: src/Publishing.Organization.Service/Dockerfile
    ports:
      - "5003:80"
    environment:
      - ORGANIZATION_DB_CONN=${ORGANIZATION_DB_CONN}
      - REDIS_CONN=${REDIS_CONN}
      - RABBIT_CONN=${RABBIT_CONN}
      - CONSUL_URL=${CONSUL_URL}
      - SERVICE_NAME=organization
      - SERVICE_ADDRESS=organization
      - SERVICE_PORT=80
      - OIDC_AUTHORITY=${OIDC_AUTHORITY}
      - OIDC_AUDIENCE=${OIDC_AUDIENCE}
      - JWT__Issuer=${JWT__Issuer}
      - JWT__Audience=${JWT__Audience}
      - JWT__SigningKey=${JWT__SigningKey}
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_started
      rabbit:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/health || exit 1"]
      interval: 10s
      timeout: 5s
      start_period: 30s
      retries: 5
    networks:
      - micro-net

  gateway:
    build:
      context: .
      dockerfile: src/ApiGateway/Dockerfile
    ports:
      - "5000:80"
    environment:
      - REDIS_CONN=${REDIS_CONN}
      - JWT__Issuer=${JWT__Issuer}
      - JWT__Audience=${JWT__Audience}
      - JWT__SigningKey=${JWT__SigningKey}
      - CONSUL_URL=${CONSUL_URL}
      - SERVICE_NAME=gateway
      - SERVICE_ADDRESS=gateway
      - SERVICE_PORT=80
      - OIDC_AUTHORITY=${OIDC_AUTHORITY}
      - OIDC_AUDIENCE=${OIDC_AUDIENCE}
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      orders:
        condition: service_healthy
      profile:
        condition: service_healthy
      organization:
        condition: service_healthy
      rabbit:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - micro-net

  db:
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
      - ACCEPT_EULA=${ACCEPT_EULA}
      - SA_PASSWORD=${SA_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pidof sqlservr"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "1433:1433"
    volumes:
      - db-data:/var/opt/mssql
    networks:
      - micro-net

  cache:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - micro-net

  cache-replica:
    image: redis:alpine
    command: redis-server --slaveof cache 6379
    depends_on:
      - cache
    networks:
      - micro-net

  rabbit:
    image: rabbitmq:3.13-management
    hostname: rabbit
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - micro-net

  consul:
    image: hashicorp/consul:1.15
    command: agent -dev -client=0.0.0.0
    ports:
      - "8500:8500"
    networks:
      - micro-net

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.2
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    networks:
      - micro-net

  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.2
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - micro-net

  jaeger:
    image: jaegertracing/all-in-one:1.54
    ports:
      - "16686:16686"
      - "6831:6831/udp"
      - "14268:14268"
    networks:
      - micro-net

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    networks:
      - micro-net

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.1
    command: start-dev
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KEYCLOAK_IMPORT=/opt/keycloak/data/import/realm-export.json
    ports:
      - "8080:8080"
    volumes:
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json:ro
    networks:
      - micro-net

networks:
  micro-net:
    driver: bridge

volumes:
  db-data:
  redis-data:
